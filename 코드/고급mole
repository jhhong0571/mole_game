import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

public class AdvancedMoleGame extends JFrame {
    private static final int BOARD_WIDTH = 720;
    private static final int BOARD_HEIGHT = 800;
    private static final int MOLE_SIZE = 50;
    private static final int MINE_SIZE = 40;
    private static final int GAME_DURATION = 30;
    private static final int NUM_MOLES = 3;
    private static final int NUM_MINES = 2;
    private SoundManager soundManager;
    private SoundManager Music;
    private boolean gameRunning;
    private int score;
    private int timeRemaining;
    private ArrayList<Mole> moles;
    private ArrayList<Mine> mines;
    private BufferedImage hammer;
    private BufferedImage hammer1;
    private int hammerX;
    private int hammerY;
    private boolean isHammering;

    private Timer gameTimer;

    public AdvancedMoleGame() {
        setTitle("두더지 게임(숙련자)");
        setSize(BOARD_WIDTH, BOARD_HEIGHT);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setResizable(false);

        soundManager = new SoundManager("hit.wav");
        Music = new SoundManager("music.wav");

        //두더지가 동일한 위치에서 나오는 문제 -> 초기화
        moles = new ArrayList<>();
        for (int i = 0; i < NUM_MOLES; i++) {
            moles.add(new Mole());
        }
        mines = new ArrayList<>();
        for (int i = 0; i < NUM_MINES; i++) {
            mines.add(new Mine());
        }

        try {
            hammer = ImageIO.read(new File("hammer.png"));
            hammer1 = ImageIO.read(new File("hammer1.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }

        isHammering = false;
        //컨트롤
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (gameRunning) {
                    int keyCode = e.getKeyCode();
                    if (keyCode == KeyEvent.VK_LEFT) {
                        hammerX -= 20;
                    } else if (keyCode == KeyEvent.VK_RIGHT) {
                        hammerX += 20;
                    } else if (keyCode == KeyEvent.VK_DOWN) {
                        hammerY += 20;
                    } else if (keyCode == KeyEvent.VK_UP) {
                        hammerY -= 20;
                    } else if (keyCode == KeyEvent.VK_SPACE) {
                        isHammering = true;

                        for (Mine mine : mines) {
                            if (mine.isHit(hammerX, hammerY)) {
                                score -= 2;
                                mine.hide();
                            }
                        }
                    }

                    if (isHammering) {
                        soundManager.play();
                        for (Mole mole : moles) {
                            if (mole.isHit(hammerX, hammerY)) {
                                score++;
                                mole.hide();
                            }
                        }
                    }
                    repaint();
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_SPACE) {
                    isHammering = false;
                }
            }
        });


        gameTimer = new Timer(1000, new ActionListener() {  // 두더지 나타남과 사라짐 속도를 빠르게 함
            @Override
            public void actionPerformed(ActionEvent e) {
                if (timeRemaining <= 0) {
                    gameRunning = false;
                    gameTimer.stop();
                    JOptionPane.showMessageDialog(null, "게임 종료! 점수: " + score, "게임 결과", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    timeRemaining--;
                    for (Mole mole : moles) {
                        if (mole.isVisible()) {
                            mole.hide();
                        } else {
                            mole.show();
                        }
                    }
                    repaint();
                    for (Mine mine : mines) {
                        if (mine.isVisible()) {
                            mine.hide();
                        } else {
                            mine.show();
                        }
                    }
                    repaint();
                }
                if (timeRemaining == 0) {
                    endGame();
                }
            }
        });

        gameRunning = false;
        score = 0;
        timeRemaining = GAME_DURATION;

        hammerX = BOARD_WIDTH / 2;
        hammerY = BOARD_HEIGHT / 2;
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);

        // 배경 색을 #BFBFBF로 설정
        g.setColor(new Color(0xBF, 0xBF, 0xBF));
        g.fillRect(0, 0, BOARD_WIDTH, BOARD_HEIGHT);

        for (Mole mole : moles) {
            if (mole.isVisible()) {
                g.drawImage(mole.getImage(), mole.getX(), mole.getY(), null);
            }
        }

        BufferedImage currentHammerImage = isHammering ? hammer1 : hammer;
        g.drawImage(currentHammerImage, hammerX, hammerY, null);

        g.setColor(Color.WHITE);
        g.setFont(new Font("Arial", Font.PLAIN, 24));
        g.drawString("Score: " + score, 10, 60);

        g.setColor(Color.RED);
        g.drawString("Time: " + timeRemaining, 280, 60);
    }


    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            AdvancedMoleGame game = new AdvancedMoleGame();
            game.setVisible(true);
            game.startGame();
        });
    }

    //----------------------------  게임 종료, 기록 작성 시스템 파트
    public void startGame() {
        gameRunning = true;
        score = 0;
        timeRemaining = GAME_DURATION;
        gameTimer.start();
        Music.play();
        for (Mole mole : moles) {
            mole.hide();
        }
        requestFocus();
    }

    public void endGame() {
        gameRunning = false;
        gameTimer.stop();
        Music.stop();
        String playerName = getPlayerName();
        if (playerName != null && !playerName.isEmpty()) {
            recordScore(playerName, score);
        }
        resetGame();
    }

    public String getPlayerName() {
        return JOptionPane.showInputDialog("게임 종료! 이름을 입력하세요:");
    }

    public void recordScore(String playerName, int playerScore) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("scores.txt", true))) {
            String mode = "A"; //난이도 구분용 A는 고급자
            writer.write(playerName + ": " + playerScore + " (" + mode + ")\n");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void resetGame() {
        this.dispose();
        SwingUtilities.invokeLater(() -> {
            GameLauncher launcher = new GameLauncher();
            launcher.setVisible(true);
        });
    }

    //-------------------------------
    class Mole {
        private int x, y;
        private boolean visible;
        private BufferedImage image;
        private boolean isHit;

        public Mole() {
            try {
                image = ImageIO.read(new File("mole.jpg"));
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public boolean isVisible() {
            return visible && !isHit;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public BufferedImage getImage() {
            return image;
        }

        public void show() {
            Random random = new Random();
            x = random.nextInt(BOARD_WIDTH - MOLE_SIZE);
            y = random.nextInt(BOARD_HEIGHT - MOLE_SIZE);
            visible = true;
        }

        public boolean isHit(int targetX, int targetY) {
            if (!isHit && visible) {
                Rectangle moleBoundingBox = new Rectangle(x, y, MOLE_SIZE, MOLE_SIZE);
                Rectangle hammerBoundingBox = new Rectangle(targetX, targetY, hammer.getWidth(), hammer.getHeight());
                if (moleBoundingBox.intersects(hammerBoundingBox)) {
                    isHit = true;
                    try {
                        image = ImageIO.read(new File("mole_hit.jpg"));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    return true;
                }
            }
            return false;
        }

        public void hide() {
            visible = false;
            isHit = false;
            try {
                image = ImageIO.read(new File("mole.jpg"));
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    class Mine {
        private int x, y;
        private boolean visible;
        private BufferedImage mine;
        private boolean isHit;

        public Mine() {
            try {
                mine = ImageIO.read(new File("mine.png"));
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public boolean isVisible() {
            return visible && !isHit;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public BufferedImage getImage() {
            return mine;
        }

        public void show() {
            Random random = new Random();
            x = random.nextInt(BOARD_WIDTH - MINE_SIZE);
            y = random.nextInt(BOARD_HEIGHT - MINE_SIZE);
            visible = true;
        }

        public boolean isHit(int targetX, int targetY) {
            if (!isHit && visible) {
                Rectangle mineBoundingBox = new Rectangle(x, y, MINE_SIZE, MINE_SIZE);
                Rectangle hammerBoundingBox = new Rectangle(targetX, targetY, hammer.getWidth(), hammer.getHeight());
                if (mineBoundingBox.intersects(hammerBoundingBox)) {
                    isHit = true;
                    return true;
                }
            }
            return false;
        }

        public void hide() {
            visible = false;
            isHit = false;
        }
    }


}

